#include <Arduino.h>
#include <util/delay.h>

#include <Adafruit_GFX.h> 
#include <Adafruit_SSD1306.h>

#include <Teclado.h>

#include <gameTRex.h>
//#include <gameSnake.h>
#include <gameGuy.h>
#include <scores.h>


const unsigned char PROGMEM logo [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x3f, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x7f, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x7f, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0xfe, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0xfe, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xc1, 0xfc, 0x00, 0x00, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0x81, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xf8, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xf3, 0xfc, 0x0f, 0xf0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xf8, 0x03, 0xf8, 0x0f, 0xe0, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xc0, 0x07, 0xf0, 0x0f, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0x00, 0x0f, 0xf0, 0x1f, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 
  0x01, 0xfe, 0x00, 0x0f, 0xe0, 0x1f, 0xc0, 0x00, 0x1f, 0x80, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xfc, 0x00, 0x1f, 0xe0, 0x3f, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xf8, 0x00, 0x1f, 0xc0, 0x3f, 0x80, 0x00, 0x1f, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xf8, 0x00, 0x3f, 0xc0, 0x3f, 0xfe, 0x00, 0x1e, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xf0, 0x00, 0x3f, 0x80, 0x7f, 0xff, 0x00, 0x0c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xf0, 0x00, 0x7f, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xf0, 0x00, 0xff, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xe0, 0x00, 0xfe, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xe0, 0x01, 0xfe, 0x00, 0x0f, 0xfc, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
  0x07, 0xe0, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 
  0x07, 0xf0, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xf0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x3c, 0x61, 0xc1, 0xe7, 0x3e, 0x3c, 0x7c, 0x23, 0xe0, 
  0x07, 0xf8, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x7e, 0x63, 0xe3, 0xe7, 0x3e, 0x7e, 0x7e, 0x23, 0xe0, 
  0x03, 0xfe, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x46, 0x66, 0x32, 0x02, 0x30, 0x46, 0x66, 0x26, 0x00, 
  0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7e, 0x67, 0xf6, 0x02, 0x30, 0xc6, 0x62, 0x26, 0x00, 
  0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7e, 0x67, 0xe6, 0x02, 0x30, 0xc6, 0x62, 0x26, 0x00, 
  0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x60, 0x66, 0x03, 0x02, 0x30, 0x66, 0x62, 0x26, 0x00, 
  0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x73, 0xe3, 0xf3, 0x30, 0x7c, 0x62, 0x23, 0xe0, 
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x31, 0xc1, 0xe3, 0x30, 0x38, 0x62, 0x21, 0xc0, 
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x3c, 0x6c, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x3e, 0x7f, 0xf1, 0xf1, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x63, 0x33, 0x13, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x1e, 0x63, 0x33, 0x39, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x63, 0x33, 0xf0, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x46, 0x63, 0x33, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x66, 0x63, 0x31, 0xf3, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x3e, 0x63, 0x31, 0xf1, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define OLED_RESET PIN_A4
Adafruit_SSD1306 display(OLED_RESET);

byte Enter = 8;
byte Arriba = 9;
byte Derecha = 10;
byte Abajo = 11;
byte Izquierda = 12;
//byte led = 13;

void Menu(int op) {
  display.clearDisplay(); 
  display.setTextSize(1);
  display.setTextColor(1);
  switch (op){
    case 1:{
      display.setCursor(32,6);
      display.println("*  DINOS");
      display.setCursor(50,22);
      display.println("VIBORITA");
      display.setCursor(50,38);
      display.println("TIPITO");
      display.setCursor(50,54);
      display.println("SCORES");
      break;
    }
    case 2:{
      display.setCursor(50,6);
      display.println("DINOS");
      display.setCursor(32,22);
      display.println("*  VIBORITA");
      display.setCursor(50,38);
      display.println("TIPITO");
      display.setCursor(50,54);
      display.println("SCORES");
      break;
    }
    case 3:{
      display.setCursor(50,6);
      display.println("DINOS");
      display.setCursor(50,22);
      display.println("VIBORITA");
      display.setCursor(32,38);
      display.println("*  TIPITO");
      display.setCursor(50,54);
      display.println("SCORES");
      break;
    }
    case 4:{
      display.setCursor(50,6);
      display.println("DINOS");
      display.setCursor(50,22);
      display.println("VIBORITA");
      display.setCursor(50,38);
      display.println("TIPITO");
      display.setCursor(32,54);
      display.println("*  SCORES");
      break;
    }
  }
  display.display();
}

void gameSnake(){

  display.clearDisplay();
  int snake[50][2];  //el primer arreglo es cada pixel de la viborita
                        //el segundo arreglo es: elemento 0=valor de eje X // elemento 1=valor de eje Y
  int largo=7;  //largo del cuerpo viborita
  int direccion=1; //direccion=1-derecha//2-abajo//3-izquierda//4-arriba 
  int score=0;
  int pixelAUX[2];
  int sentido=0;
  int food[2]={0,0};
  int genFood=0;
  int pausa=0;
  int pausaAUX=0;
  int salir=0;
  int jugar=0;

  //posicion inicial viborita
  for(int i=0;i<7;i++){
    snake[i][0]=24-(i*2);
    snake[i][1]=40;
  }

  //dibuja borde
  display.drawRect(0,0,128,64,1);
  display.setTextSize(1);             // Draw 2X-scale text
  display.setTextColor(1);
  display.setCursor(7,4);
  display.println("SCORE");
  display.setCursor(92,4);
  display.println(score);
  display.drawLine(0, 14, 127, 14,1);
  
  sentido=Teclado();
  while(sentido!=0){
    sentido=Teclado();
  }
  //bucle para que camine la viborita
  while(true){
    //switch para redibujar la viborita segun la direccion
    
  if(pausa==0){
  switch(direccion){
    //redibuja si se mueve hacia la derecha
        case(1):{
          for(int i=largo;i>0;i--){
            snake[i][0]=snake[i-1][0];
            snake[i][1]=snake[i-1][1];
          }
          display.drawPixel(snake[largo][0],snake[largo][1],0);
          display.drawPixel(snake[largo][0]-1,snake[largo][1],0);
          display.drawPixel(snake[largo][0],((snake[largo][1])+1),0);
          display.drawPixel(snake[largo][0]-1,((snake[largo][1])+1),0);

          if(snake[0][0]==126){
            snake[0][0]=2;
            snake[0][1]=snake[1][1];
          }else{
            snake[0][0]=snake[1][0]+2;
            snake[0][1]=snake[1][1];
          }
          for(int i=0;i<largo;i++){
            display.drawPixel(snake[i][0],snake[i][1],1);
            display.drawPixel(snake[i][0],snake[i][1]+1,1);
            display.drawPixel(((snake[i][0])-1),(snake[i][1]),1);
            display.drawPixel(((snake[i][0])-1),(snake[i][1]+1),1);
          }
          break;
        }
        case(2):{
          for(int i=largo;i>0;i--){
            snake[i][0]=snake[i-1][0];
            snake[i][1]=snake[i-1][1];
          }
          display.drawPixel(snake[largo][0],snake[largo][1],0);
          display.drawPixel(((snake[largo][0])-1),(snake[largo][1]),0);
          if(snake[largo][1]!=62){
            display.drawPixel(snake[largo][0],snake[largo][1]+1,0);
            display.drawPixel(((snake[largo][0])-1),(snake[largo][1]+1),0);
          }else{
            display.drawPixel(snake[largo][0],snake[largo][1]+1,1);
            display.drawPixel(((snake[largo][0])-1),(snake[largo][1]+1),1);
          }
          if(snake[0][1]==62){
            snake[0][0]=snake[1][0];
            snake[0][1]=16;
          }else{
            snake[0][1]=snake[1][1]+2;
            snake[0][0]=snake[1][0];
          }
          for(int i=0;i<largo;i++){
            display.drawPixel(snake[i][0],snake[i][1],1);
            display.drawPixel(snake[i][0],snake[i][1]+1,1);
            display.drawPixel(((snake[i][0])-1),(snake[i][1]),1);
            display.drawPixel(((snake[i][0])-1),(snake[i][1]+1),1);
          }
          break;
        }
        case(3):{
          for(int i=largo;i>0;i--){
            snake[i][0]=snake[i-1][0];
            snake[i][1]=snake[i-1][1];
          }
          display.drawPixel(snake[largo][0],snake[largo][1],0);
          display.drawPixel(snake[largo][0]-1,snake[largo][1],0);
          display.drawPixel(snake[largo][0],((snake[largo][1])+1),0);
          display.drawPixel(snake[largo][0]-1,((snake[largo][1])+1),0);

          if(snake[0][0]==2){
            snake[0][0]=126;
            snake[0][1]=snake[1][1];
          }else{
            snake[0][0]=snake[1][0]-2;
            snake[0][1]=snake[1][1];
          }
          for(int i=0;i<largo;i++){
            display.drawPixel(snake[i][0],snake[i][1],1);
            display.drawPixel(snake[i][0],snake[i][1]+1,1);
            display.drawPixel(((snake[i][0])-1),(snake[i][1]),1);
            display.drawPixel(((snake[i][0])-1),(snake[i][1]+1),1);
          }
          break;
        }
        case(4):{
          for(int i=largo;i>0;i--){
            snake[i][0]=snake[i-1][0];
            snake[i][1]=snake[i-1][1];
          }
          display.drawPixel(snake[largo][0],snake[largo][1],0);
          display.drawPixel(((snake[largo][0])-1),(snake[largo][1]),0);
          if(snake[largo][1]!=62){
            display.drawPixel(snake[largo][0],snake[largo][1]+1,0);
            display.drawPixel(((snake[largo][0])-1),(snake[largo][1]+1),0);
          }
          if(snake[0][1]==16){
            snake[0][0]=snake[1][0];
            snake[0][1]=62;
          }else{
            snake[0][1]=snake[1][1]-2;
            snake[0][0]=snake[1][0];
          }
          for(int i=0;i<largo;i++){
            display.drawPixel(snake[i][0],snake[i][1],1);
            display.drawPixel(snake[i][0],snake[i][1]+1,1);
            display.drawPixel(((snake[i][0])-1),(snake[i][1]),1);
            display.drawPixel(((snake[i][0])-1),(snake[i][1]+1),1);
          }
          break;
        }
        default:{
          direccion=1;
        }
      }
      
while(genFood==0){
        food[0] = (random(0,62))*2;
        food[1] = (random(9,31))*2;
        display.drawPixel(food[0],food[1],WHITE);
        display.drawPixel(food[0]-1,food[1],WHITE);
        display.drawPixel(food[0],food[1]+1,WHITE);
        display.drawPixel(food[0]-1,food[1]+1,WHITE);
        genFood=1;
        for(char j=0;j<largo;j++){
          if((snake[j][0]==food[0])||(snake[j][1]==food[1])){
            genFood=0;
            break;
          }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
        }
      }
if((snake[0][0]==food[0])&&(snake[0][1]==food[1])){
        largo++;
        genFood=0;
        score=score+100;
      }
    
      if(sentido==0){
        sentido=Teclado();
      }

switch(sentido){
        case 1:{

          
          pausa=1;
          
        sentido=0;
          break;
        }
        case 2:{
          if((direccion==1)||(direccion==3)){
            direccion=4;
          }
          sentido=0;
          break;
        }
        case 3:{
          if((direccion==2)||(direccion==4)){
            direccion=1;
          }
          sentido=0;
          break;
        }
        case 4:{
          if((direccion==1)||(direccion==3)){
            direccion=2;
          }
          sentido=0;
          break;
        }
        case 5:{
          if((direccion==2)||(direccion==4)){
            direccion=3;
          }
          sentido=0;
          break;
        }
        default:{
          sentido=0;
        }
      }
      for(int i=0;i<largo;i++){
Serial.print(snake[i][0]);
Serial.println(snake[i][1]);
      }
_delay_ms(50);
display.display();

Serial.println(jugar);
  }
  while(sentido!=0){
    sentido=Teclado();
  }

if(pausa==1){
  

switch(sentido){
          case 0:{
            sentido=Teclado();
            break;
          }
          case 1:{
            if(pausaAUX==1){
              salir=1;
            }else{
              pausa=0;
              
            }
            sentido=0;
            break;
          }
          case 2:{
            if(pausaAUX==0){
              pausaAUX=1;
            }else{
              pausaAUX=0;
            }
            sentido=0;
            break;
          }
          case 4:{
            if(pausaAUX==0){
              pausaAUX=1;
            }else{
              pausaAUX=0;
            }
            sentido=0;
            break;
          }
          default:{
            sentido=0;
          }   
        }   
        
display.fillRect(34, 20, 60, 40, WHITE);
display.setTextColor(BLACK);
display.setTextSize(1);             // Draw 2X-scale text
display.setTextColor(SSD1306_WHITE);
display.setCursor(32,20);
display.println("Reanudar");
display.setCursor(32,30);
display.println("Salir");
display.display();
             
    }
    while(sentido!=0){
    sentido=Teclado();
  }     
  }}



void setup(){
  Serial.begin(9600);
  
  pinMode(13, OUTPUT);
  
  pinMode(Enter,INPUT);
  pinMode(Arriba,INPUT);
  pinMode(Derecha,INPUT);
  pinMode(Abajo,INPUT);
  pinMode(Izquierda,INPUT);
  
  randomSeed(analogRead(A0)); 

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.drawBitmap(0,0,logo,128,64,1);
  display.display();
  _delay_ms(3000);

}
void loop(){
  
  int menu,Tecla=0;
  char op=1,Boton=0;

  while(true){
      Menu(op);
      if(Tecla==0){
        Tecla=Teclado();
      }
      switch(Tecla){
        case 1:{
          Tecla=0;

          switch(op){
            case 1:{
              gameTRex();
              op=1;
              break;
            }
            case 2:{
              gameSnake();
              op=1;
              break;
            }
            case 3:{
              gameGuy();
              op=1;
              break;
            }
            case 4:{
              scores();
              op=1;
              break;
            }
          }
          break;
        }
        case 2:{
          Tecla=0;
          if(op==1){
            op=4;
          }else{
            op--;
          }
          break;
        }
        case 4:{
          Tecla=0;
          if(op==4){
            op=1;
          }else{
          op++;
          }
        break;
        }
        default:{
          Tecla=0;
          break;
        }
      }
  }
}